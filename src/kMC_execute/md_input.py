import numpy as np

class potential_info:
    def __init__(self,T):
        if T == 0:
            self.latt_const = {'a': 2.9365976437421808, 'c': 4.6410202908664067}
            self.C13 = 83.235
            self.C44 = 54.91
        elif T == 50:
            self.latt_const = {'a': 2.93589832714826, 'c': 4.65206265090668}
            self.C13 = 76.683237329627
            self.C44 = 57.5823577578576
        elif T == 100:
            self.latt_const = {'a': 2.93685760422465, 'c': 4.65819046226185}
            self.C13 = 72.553724977629
            self.C44 = 58.894072230488
        elif T == 150:
            self.latt_const = {'a': 2.93824479211728, 'c':4.66269844512587 }
            self.C13 = 69.2186417189646
            self.C44 = 58.6513357734666
        elif T == 200:
            self.latt_const = {'a': 2.9398882900745, 'c': 4.66639208401496} 
            self.C13 = 66.5484182302669
            self.C44 = 58.2546795794299
        elif T == 250:
            self.latt_const = {'a': 2.94149495512421 , 'c': 4.66980493976011} 
            self.C13 = 64.7146110607989
            self.C44 = 57.8128811978421
        elif T == 300:
            self.latt_const = {'a': 2.94307276759734 , 'c':4.67288606774279 }
            self.C13 = 62.1215150390139
            self.C44 = 56.6895104716219
        elif T == 350:
            self.latt_const = {'a': 2.94459149291013, 'c':4.67573480284092 }
            self.C13 = 60.8272693903142
            self.C44 = 56.0116637473055
        elif T == 400: 
            self.latt_const = {'a': 2.94608651296502, 'c': 4.67861099647893} 
            self.C13 = 60.1617900262731
            self.C44 = 54.7911849844006
        elif T == 450: 
            self.latt_const = {'a':2.94751911087698 , 'c': 4.68115879834816}
            self.C13 = 59.8722600091458
            self.C44 = 54.0845150380664
        elif T == 500:
            self.latt_const = {'a': 2.94905103124811, 'c': 4.68373656972749}
            self.C13 = 60.0974223000687
            self.C44 = 53.5867320991726
        elif T == 550:
            self.latt_const = {'a': 2.95036967772486, 'c': 4.68586723218424}
            self.C13 = 60.8766300147295
            self.C44 = 51.8086625261167
        elif T == 600:
            self.latt_const = {'a': 2.95180773265858, 'c': 4.68822150521338}
            self.C13 = 58.3465275928961
            self.C44 = 50.0506232687952
        elif T == 650:
            self.latt_const = {'a': 2.95296195379178, 'c':4.69027805888201 }
            self.C13 = 59.3295289698496
            self.C44 = 50.5876432463846
        elif T == 700:
            self.latt_const = {'a': 2.95436373943601, 'c': 4.69255637570191}
            self.C13 = 62.041873451027
            self.C44 = 46.8363650617183
        elif T == 750:
            self.latt_const = {'a': 2.95544778256945 , 'c': 4.69478836082782}
            self.C13 = 61.3057277469733
            self.C44 = 46.5512097205221
        elif T == 800:
            self.latt_const = {'a': 2.95686503143797, 'c': 4.69648088156127}
            self.C13 = 61.1594249587421
            self.C44 = 46.2494753895938
        elif T == 850:
            self.latt_const = {'a': 2.95797195263539, 'c': 4.69868866412223}
            self.C13 = 60.0821635858494
            self.C44 = 44.7488206350276
        elif T == 900:
            self.latt_const = {'a': 2.9592826951213, 'c': 4.70085160174947}
            self.C13 = 64.3583930371445
            self.C44 = 42.4102835883855
        


class core_probability:
    def __init__(self,T):
        self.a = -2.953840112370678e-07
        self.b = 0.00039435364900775277
        self.c = 0.5532402289918718
        self.aP = 9.151688960034703e-08
        self.bP = -0.00038421494906429744
        self.cP = 0.46430834363346063
        self.d = 2.915697990621726
        self.e = 2356.338488794463
        self.f = -7.907399258987868
        self.T = T

    def Pi_P_core(self, T, a, b, c):
        prob = a*T**2+b*T+c
        return prob

    def B_core(self,T, d, e, f):
        prob = d/(np.exp(e/T)-f)
        return prob

    def calc(self):
        if self.T != 0:
            B_core_prob = self.B_core(self.T, self.d, self.e, self.f)
        else:
            B_core_prob = 0
        i_core_prob = self.Pi_P_core(self.T, self.a, self.b, self.c)
        P_core_prob = self.Pi_P_core(self.T, self.aP, self.bP, self.cP)
        return B_core_prob, i_core_prob, P_core_prob

def basic_info(latt_const):
    a = latt_const['a']
    c = latt_const['c']
    b = np.array([a,0,0])
    rc = 6*a
    seg_len = 2*a
    unit_plane    = [[0,  np.sqrt(3)*a/2, 0],   #B
                     [0,  np.sqrt(3)*a/2, c],   #Pi1
                     [0, -np.sqrt(3)*a/2, c],   #Pi2
                     [0,               0, c]]   #P
    return b, rc, seg_len, np.array(unit_plane)


junction_parallel_energy = { #unit: eV
    '01': 6.380,
    '10': 6.380,
    '02': 6.380,
    '20': 6.380,
    '13': 2.261,
    '31': 2.261,
    '12': 14.533,
    '21': 14.533,
    '13': 6.238,
    '23': 6.238,
    '31': 6.238,
    '32': 6.238,
    '00': 0,
    '11': 0,
    '22': 0,
    '33': 0,
}

node_energy = { #unit: eV  e.g '01', core is 0, and kink type =1
    '00': 1.477634771637653666e-01,
    '01': 1.877544756848674945e+00,
    '02': 1.877544756848674945e+00,
    '03': 1.598141158597830458e+00,
    '10': -4.400787112773823506e-01,
    '11': -1.575159201583136381e+00,
    '12': -1.315447621986453486e+00,
    '13': -1.112312058316510033e+00,
    '20': -4.400787112773823506e-01,
    '21': -1.315447621986453486e+00,
    '22': -1.575159201583136381e+00,
    '23': -1.112312058316510033e+00,
    '30': -5.581447025399486339e-01,
    '31': -9.865342432897159508e-01,
    '32': -9.865342432897159508e-01,
    '33': -1.567157809271895408e+00,
}

kink_energy = { # unit: eV/unit_length
    '0': 5.185997869236929070e+00,
    '1': 9.419267021157468278e+00,
    '2': 9.419267021157468278e+00,
    '3': 6.425060489334170732e+00,
}

node_interaction_energy = { # unit ev/sqrt(unit_length)
    '000': 5.586332553704047577e-01,
    '001': 7.543637816527357653e-01,
    '002': 7.543637816527357653e-01,
    '003': 1.800366338698892399e+00,
    '010': 5.080503089046107812e-01,
    '011': 1.773200186651656907e+00,
    '012': 1.385418324411491264e+00,
    '013': 1.587306100674417575e+00,
    '100':   5.080503089046107812e-01,
    '101':   1.773200186651656907e+00,
    '102':   1.385418324411491264e+00,
    '103':   1.587306100674417575e+00,
    '020':   5.080503089046107812e-01,
    '021':   1.385418324411491264e+00,
    '022':   1.773200186651656907e+00,
    '023':   1.587306100674417575e+00,
    '200':   5.080503089046107812e-01,
    '201':   1.385418324411491264e+00,
    '202':   1.773200186651656907e+00,
    '203':   1.587306100674417575e+00,
    '030': 4.560100559187418856e-02,
    '031': 1.595797494476330236e+00,
    '032': 1.595797494476330236e+00,
    '033': 1.354782504926977271e+00,
    '300':   4.560100559187418856e-02,
    '301':   1.595797494476330236e+00,
    '302':   1.595797494476330236e+00,
    '303':   1.354782504926977271e+00,
    '110': 5.923984050004117013e-02,
    '111': 8.295487162957823069e-01,
    '112': 1.716835760914005471e+00,
    '113': 2.567066943022521031e+00,
    '120': 5.187840165276293991e-01,
    '121': 1.636562587195473872e+00,
    '122': 1.636562587195473872e+00,
    '123': 8.089488454752163937e-01,
    '210':   5.187840165276293991e-01,
    '211':   1.636562587195473872e+00,
    '212':   1.636562587195473872e+00,
    '213':   8.089488454752163937e-01,
    '220':   5.923984050004117013e-02,
    '221':   1.716835760914005471e+00,
    '222':   8.295487162957823069e-01,
    '223':   2.567066943022521031e+00,
    '130': 2.651722074754588876e-01,
    '131': 1.243304887785817714e+00,
    '132': 1.695681987186764772e+00,
    '133': 1.334857103823310354e+00,
    '310':   2.651722074754588876e-01,
    '311':   1.243304887785817714e+00,
    '312':   1.695681987186764772e+00,
    '313':   1.334857103823310354e+00,
    '230':   2.651722074754588876e-01,
    '231':   1.695681987186764772e+00,
    '232':   1.243304887785817714e+00,
    '233':   1.334857103823310354e+00,
    '320':   2.651722074754588876e-01,
    '321':   1.695681987186764772e+00,
    '322':   1.243304887785817714e+00,
    '323':   1.334857103823310354e+00,
    '330': 2.470476086425589024e+00,
    '331': 3.067390070536277324e+00,
    '332': 3.067390070536277324e+00,
    '333': 6.801775425836328326e-01, 
}

def node_kink_energy(core1, core2, kink_type, k_length=1):
    k_type = str(int(kink_type))
    c1 = str(int(core1))
    c2 = str(int(core2))
    E_node_1 = node_energy[c1+k_type]
    E_node_2 = node_energy[c2+k_type]
    E_kink  = kink_energy[k_type]*k_length
    E_n1n2 = node_interaction_energy[c1+c2+k_type]*k_length**2
    return E_node_1 + E_node_2 + E_kink + E_n1n2
